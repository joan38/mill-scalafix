import $repo.`https://oss.sonatype.org/content/repositories/snapshots`
import $ivy.`com.goyeau::mill-git::0.2.7-15-733a3c7-SNAPSHOT`
import $ivy.`com.goyeau::mill-scalafix::0.5.1-10-7c22ece-SNAPSHOT`
import $ivy.`org.typelevel::scalac-options:0.1.7`
import com.goyeau.mill.git.{GitVersionModule, GitVersionedPublishModule}
import com.goyeau.mill.scalafix.StyleModule
import mill.*
import mill.Task.dest
import mill.define.Cross
import mill.scalalib.*
import mill.scalalib.publish.{Developer, License, PomSettings, VersionControl}
import org.typelevel.scalacoptions.ScalacOptions.*
import org.typelevel.scalacoptions.{ScalaVersion, ScalacOptions}

object `mill-scalafix` extends Cross[MillScalafixCross]("1.0.0-RC2", "0.12.0")
trait MillScalafixCross extends Cross.Module[String] with StyleModule with GitVersionedPublishModule:
  val millVersion = crossValue
  override def scalaVersion = millVersion match
    case millVersion if millVersion.startsWith("0.12") => "2.13.16"
    case millVersion if millVersion.startsWith("1.0")  => "3.7.0"
  override def scalacOptions = super.scalacOptions() ++ ScalacOptions.tokensForVersion(
    ScalaVersion.unsafeFromString(scalaVersion()),
    ScalacOptions.default + source3 // ++ fatalWarningOptions Reenable this once we drop support for Scala 2/0.12.x
  )

  override def compileIvyDeps = super.compileIvyDeps() ++ (millVersion match
    case version if version.startsWith("1.0") =>
      Agg(
        ivy"com.lihaoyi::mill-libs-main:$millVersion",
        ivy"com.lihaoyi::mill-libs-scalalib-api:$millVersion"
      )
    case _ =>
      Agg(
        ivy"com.lihaoyi::mill-main:$millVersion",
        ivy"com.lihaoyi::mill-scalalib:$millVersion"
      ))
  override def ivyDeps = super.ivyDeps() ++ Agg(
    ivy"ch.epfl.scala:scalafix-interfaces:0.14.2"
  )

  object test extends ScalaTests with TestModule.Munit:
    override def ivyDeps = Agg(
      ivy"org.scalameta::munit::1.1.0",
      ivy"com.lihaoyi::mill-testkit:$millVersion"
    )
    override def forkEnv = Map("MILL_EXECUTABLE_PATH" -> millExecutable.assembly().path.toString)

    // Create a Mill executable configured for testing our plugin
    object millExecutable extends JavaModule:
      override def ivyDeps = millVersion match
        case version if version.startsWith("1.0") => Agg(ivy"com.lihaoyi:mill-runner-launcher_3:$millVersion")
        case _                                    => Agg(ivy"com.lihaoyi:mill-dist:$millVersion")
      override def mainClass = Some("mill.launcher.MillLauncherMain")
  end test

  override def artifactName   = s"mill-scalafix_mill${millBinaryVersion(millVersion)}"
  override def publishVersion = GitVersionModule.version(withSnapshotSuffix = true)()
  def pomSettings = PomSettings(
    description = "A Scalafix plugin for Mill build tool",
    organization = "com.goyeau",
    url = "https://github.com/joan38/mill-scalafix",
    licenses = Seq(License.MIT),
    versionControl = VersionControl.github("joan38", "mill-scalafix"),
    developers = Seq(Developer("joan38", "Joan Goyeau", "https://github.com/joan38"))
  )
end MillScalafixCross

def millBinaryVersion(millVersion: String) = millVersion match
  case version if version.startsWith("0.12") => "0.11" // 0.12.x is binary compatible with 0.11.x
  case version if version.startsWith("1.0.0-RC1")  => version
  case version if version.startsWith("1.")  => "1"
  case _ => throw IllegalArgumentException(s"Unsupported Mill version: $millVersion")
