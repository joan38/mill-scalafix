import $repo.`https://oss.sonatype.org/content/repositories/snapshots`
import $ivy.`com.goyeau::mill-git::0.2.7-8-118f733-SNAPSHOT`
import $ivy.`com.goyeau::mill-scalafix::0.5.1-1-e3aa1ee-SNAPSHOT`
import $ivy.`org.typelevel::scalac-options:0.1.7`
import com.goyeau.mill.git.{GitVersionModule, GitVersionedPublishModule}
import com.goyeau.mill.scalafix.StyleModule
import mill.*
import mill.Task.dest
import mill.define.Cross
import mill.scalalib.*
import mill.scalalib.publish.{Developer, License, PomSettings, VersionControl}
import org.typelevel.scalacoptions.ScalacOptions.*
import org.typelevel.scalacoptions.{ScalaVersion, ScalacOptions}

object `mill-scalafix` extends Cross[MillScalafixCross]("0.12.0", "0.13.0-M0-174-bdd60a")
trait MillScalafixCross extends Cross.Module[String] with StyleModule with GitVersionedPublishModule:
  val millVersion = crossValue
  override def scalaVersion = millVersion match
    case millVersion if millVersion.startsWith("0.12") => "2.13.16"
    case millVersion if millVersion.startsWith("0.13") => "3.6.3"
  override def scalacOptions = super.scalacOptions() ++ ScalacOptions.tokensForVersion(
    ScalaVersion.unsafeFromString(scalaVersion()),
    ScalacOptions.default + source3 //++ fatalWarningOptions
  )

  override def compileIvyDeps = super.compileIvyDeps() ++ Agg(
    ivy"com.lihaoyi::mill-main:$millVersion",
    ivy"com.lihaoyi::mill-scalalib:$millVersion"
  )
  override def ivyDeps = super.ivyDeps() ++ Agg(
    ivy"ch.epfl.scala:scalafix-interfaces:0.14.2",
    ivy"org.scala-lang.modules::scala-java8-compat:1.0.2"
  )

  object test extends ScalaTests with TestModule.Munit:
    override def ivyDeps = Agg(
      ivy"org.scalameta::munit::1.1.0",
      ivy"com.lihaoyi::mill-testkit:$millVersion"
    )
    override def forkEnv = Map("MILL_EXECUTABLE_PATH" -> millExecutable.assembly().path.toString)

    // Create a Mill executable configured for testing our plugin
    object millExecutable extends JavaModule:
      override def ivyDeps   = Agg(ivy"com.lihaoyi:mill-dist:$millVersion")
      override def mainClass = Some("mill.runner.client.MillClientMain")
      override def resources = Task:
        val p = dest / MillScalafixCross.this.artifactId()
        os.write(p, MillScalafixCross.this.localClasspath().map(_.path).mkString("\n"), createFolders = true)
        Seq(PathRef(dest))
  end test

  override def artifactName   = s"mill-scalafix_mill${millBinaryVersion(millVersion)}"
  override def publishVersion = GitVersionModule.version(withSnapshotSuffix = true)()
  def pomSettings = PomSettings(
    description = "A Scalafix plugin for Mill build tool",
    organization = "com.goyeau",
    url = "https://github.com/joan38/mill-scalafix",
    licenses = Seq(License.MIT),
    versionControl = VersionControl.github("joan38", "mill-scalafix"),
    developers = Seq(Developer("joan38", "Joan Goyeau", "https://github.com/joan38"))
  )
end MillScalafixCross

def millBinaryVersion(millVersion: String) = millVersion match
  case version if version.startsWith("0.12") => "0.11" // 0.12.x is binary compatible with 0.11.x
  case version if version.startsWith("0.13") => "0.13.0-M0"
  case _ => throw IllegalArgumentException(s"Unsupported Mill version: $millVersion")
